struct Struct {
  var a;
  var b;
}

# User defined generic function may operate on struct types as well.
def multiply_transpose(Struct value) {
  # We can access the elements of a struct via the '.' operator.
  return transpose(value.a) * transpose(value.b);
}

def main() {
  # We initialize struct values using a composite initializer.
  Struct value = {[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]};

  # We pass these arguments to functions like we do with variables.
  var c = multiply_transpose(value);
  print(c);
  print([[0]]);

  ## Handle division
  var div1 = c / c;

  print(div1);
  print([[0]]);

  # See what happens when we divide
  var div2 = transpose([[1, 2, 3], [4, 5, 0]]);
  var div3 = c / div2;
  print(div3);
  print([[0]]);

  ## handle casts 
  # These should be handled by all but the half
  var cast_test = [3000000000, 400000, 300000];
  var cast1 = cast_to_double(c);
  var cast2 = cast_to_float(c);
  var cast3 = cast_to_half(c);

  print(cast1);
  print(cast2);
  print(cast3);
}